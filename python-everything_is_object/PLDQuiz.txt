# Review of 'Everything is Object'


## Functions

### type()
#### Prints the type of an Object.

### id()
#### Prints variable identifier ()

## Objects and Modifications

    Do the following variables point to the same object?
		>>> a = 89
		>>> b = 100

		
        A: NO

		>>> a = 89
		>>> b = 89

		
        A: YES

		>>> a = 89
		>>> b = a
		
		A: Yes

		>>> a = 89
		>>> b = a + 1

		A: NO


What will print?

		>>> s1 = "Best School"
		>>> s2 = s1
		>>> print(s1 == s2)

		
        A: True


		>>> s1 = "Best"
		>>> s2 = s1
		>>> print(s1 is s2)


		A: True

		>>> s1 = "Best School"
		>>> s2 = "Best School"
		>>> print(s1 == s2)

		A: True

		>>> s1 = "Best School"
		>>> s2 = "Best School"
		>>> print(s1 is s2)

		A: True

		>>> l1 = [1, 2, 3]
		>>> l2 = [1, 2, 3] 
		>>> print(l1 == l2)

		A: True

		>>> l1 = [1, 2, 3]
		>>> l2 = [1, 2, 3] 
		>>> print(l1 is l2)

		A: False

		>>> l1 = [1, 2, 3]
		>>> l2 = l1
		>>> print(l1 == l2)
		
		A: True


		>>> l1 = [1, 2, 3]
		>>>l2 = l1
		>>> print(l1 is l2)

		A: True


		l1 = [1, 2, 3]
		l2 = l1
		l1.append(4)
		print(l2)

		A: [1, 2, 3, 4]

		l1 = [1, 2, 3]
		l2 = l1
		l1 = l1 + [4]
		print(l2)

		A: [1, 2, 3, 4]

		def increment(n):
 		   n += 1
		a = 1
		increment(a)
		print(a)


		A: 1

		def increment(n):
    		n.append(4)
		l = [1, 2, 3]
		increment(l)
		print(l)

		A: [1, 2, 3, 4] 

		def assign_value(n, v):
    		n = v

		l1 = [1, 2, 3]
		l2 = [4, 5, 6]
		assign_value(l1, l2)
		print(l1)

		A: [1, 2, 3]

		What is missing for this to print?
			
		a = [1, 2, 3]
		b = a[ ? ]
		print b
			[1, 2, 3]
		b[0] = 5
		print a
			[1, 2, 3]

	Which one of these are valid tuples?

        a = (1)
        a = [1]
        a = (1, )

    Which one of these is invalid?

        a = ()
        a = (1, 2)
        1 = (1 2)

	

	In the following example:

		a = (1, 2)
		b = (1, 2)

        What will print?

		a == b


        A: True
			
		a is b
			
		A: False



        
		Empty tuples [a = ()] are the same, python makes empty tuples reference
		the same object in memory to save space.

		id() : the id will change if the list is modified, such as a = a + [5],
		however, it will not change in the case of a +=
